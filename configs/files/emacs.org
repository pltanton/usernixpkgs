color:
''
* Basic EMACS configuration

** Disable default visual GUI shit.
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   (toggle-scroll-bar -1)
   (tool-bar-mode -1)
   (blink-cursor-mode -1)
   #+END_SRC

** Basic EMACS conifg
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode +1)
   (line-number-mode +1)
   (global-display-line-numbers-mode 1)
   (column-number-mode t)
   (size-indication-mode t)

   (setq inhibit-startup-screen t)

   (set-frame-font "Hack 16" nil t)
   (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Charis SIL"))))
   '(fixed-pitch ((t ( :family "Hack")))))
   (setq-default line-spacing 0)


   (setq user-full-name "Anton Plotnikov"
         user-mail-address "plotnikovanton@gmail.com")
   (setq gc-cons-threshold 50000000)
   (setq large-file-warning-threshold 100000000)

   (setq-default tab-width 4
                 indent-tabs-mode nil)
   (global-set-key (kbd "C-x k") 'kill-this-buffer)
   (add-hook 'before-save-hook 'whitespace-cleanup)
   (require 'diminish)
   #+END_SRC

** Org mode

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
   (define-key global-map "\C-cl" 'org-store-link)
   (define-key global-map "\C-ca" 'org-agenda)
   (setq org-log-done t)

   #+END_SRC

*** Beatify
    #+BEGIN_SRC emacs-lisp
    (require 'org-bullets)
    (add-hook 'org-mode-hook 'org-bullets-mode)

    (setq org-hide-emphasis-markers t)
    (add-hook 'org-mode-hook
               '(lambda ()
                   (variable-pitch-mode 1)
                   (mapc
                    (lambda (face) ;; Rescale and inherit the properties from the fixed-pitch font.
                      (set-face-attribute face nil :inherit 'fixed-pitch))
                    (list 'org-code 'org-block 'org-table 'org-property-value 'org-formula
                          'org-tag 'org-verbatim 'org-date 'company-tooltip
                          'org-special-keyword 'org-block-begin-line
                          'org-block-end-line 'org-meta-line
                          'org-document-info-keyword))))
    #+END_SRC

** Move annoying backup files to temporary directory.
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist
         `((".*" . ,temporary-file-directory)))
   (setq auto-save-file-name-transforms
         `((".*" ,temporary-file-directory t)))
   #+END_SRC

** Reload file automatically if it changed outside
   #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode t)
   #+END_SRC

** Evil mode configuration
   #+BEGIN_SRC emacs-lisp
   (require 'evil-leader)
   (global-evil-leader-mode)

   (require 'evil)
   (evil-mode 1)
   #+END_SRC
* User experience plugins

** Enable ivy for fuzzy search
   #+BEGIN_SRC emacs-lisp
   (require 'counsel)
   (require 'ivy-hydra)
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "(%d/%d) ")
   (setq ivy-height 20)

   ; ivy fuzzy
   (require 'flx)
   (setq ivy-re-builders-alist
     '((t . ivy--regex-fuzzy)))
   (setq ivy-initial-inputs-alist nil)

   (require 'ranger)
   (ranger-override-dired-mode t)
   #+END_SRC

** Treemacs
   #+BEGIN_SRC emacs-lisp
   (require 'treemacs)
   (require 'treemacs-evil)
   (global-set-key [f10] 'treemacs-select-window)
   #+END_SRC

** Keys
   #+BEGIN_SRC emacs-lisp
   (evil-leader/set-leader "SPC")
   (evil-leader/set-key
    "d" 'find-file
    "D" 'open-ranger
    "j" 'counsel-projectile
    "b" 'ivy-switch-buffer
    "h" 'helm-org-in-buffer-headings
    "r" 'counsel-M-x
    "e" 'eval-expression
    "t" 'org-time-stamp
    "c" 'insert-char)
   #+END_SRC


** Defenition of base16 nix-generated theme
   #+BEGIN_SRC emacs-lisp
   (require 'base16-theme)

   (defvar base16-nix-colors
     '(:base00 "${color.base0}"
       :base01 "${color.base1}"
       :base02 "${color.base2}"
       :base03 "${color.base3}"
       :base04 "${color.base4}"
       :base05 "${color.base5}"
       :base06 "${color.base6}"
       :base07 "${color.base7}"
       :base08 "${color.base8}"
       :base09 "${color.base9}"
       :base0A "${color.base10}"
       :base0B "${color.base11}"
       :base0C "${color.base12}"
       :base0D "${color.base13}"
       :base0E "${color.base14}"
       :base0F "${color.base15}")
     "All colors for Base16 nix are defined here.")

   ;; Define the theme
   (deftheme base16-nix)
   (base16-theme-define 'base16-nix base16-nix-colors)
   (provide-theme 'base16-nix)
   (provide 'base16-nix-theme)
   #+END_SRC

''
