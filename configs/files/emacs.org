color:
''

* Basic EMACS configuration

** Disable default visual GUI shit.
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   (toggle-scroll-bar -1)
   (tool-bar-mode -1)
   (blink-cursor-mode -1)
   #+END_SRC


** Basic EMACS conifg
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode +1)
   (line-number-mode +1)
   (global-display-line-numbers-mode 1)
   (column-number-mode t)
   (size-indication-mode t)

   (setq inhibit-startup-screen t)

   (set-frame-font "Hack 13" nil t)
   (setq-default line-spacing 0)


   (setq user-full-name "Anton Plotnikov"
	 user-mail-address "plotnikovanton@gmail.com")
   (setq gc-cons-threshold 50000000)
   (setq large-file-warning-threshold 100000000)

   (add-hook 'before-save-hook 'whitespace-cleanup)
   (require 'diminish)
   #+END_SRC


** Org mode
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
   (define-key global-map "\C-cl" 'org-store-link)
   (define-key global-map "\C-ca" 'org-agenda)
   (setq org-log-done t)

   #+END_SRC

*** Beatify
    #+BEGIN_SRC emacs-lisp
    (require 'org-bullets)
    (add-hook 'org-mode-hook 'org-bullets-mode)

    #+END_SRC


** Move annoying backup files to temporary directory.
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist
	 `((".*" . ,temporary-file-directory)))
   (setq auto-save-file-name-transforms
	 `((".*" ,temporary-file-directory t)))
   #+END_SRC


** Reload file automatically if it changed outside
   #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode t)
   #+END_SRC


** Evil mode configuration
   #+BEGIN_SRC emacs-lisp
   (require 'evil-leader)
   (global-evil-leader-mode)

   (require 'evil)
   (evil-mode 1)
   #+END_SRC


** Enable ivy for fuzzy search
   #+BEGIN_SRC emacs-lisp
   (require 'counsel)
   (require 'counsel-projectile)
   (require 'ivy-hydra)
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "(%d/%d) ")
   (setq ivy-height 20)

   ; ivy fuzzy
   (require 'flx)
   (setq ivy-re-builders-alist
     '((t . ivy--regex-fuzzy)))
   (setq ivy-initial-inputs-alist nil)
   #+END_SRC


** Projectile

   #+BEGIN_SRC emacs-lisp
   (require 'projectile)
   (projectile-mode t)
   #+END_SRC


** File navigation
   Treemacs is perfect replacement of NERDTree.
   Ranger implementation is also good to chose files to edit and import as porjcet if needed.
   #+BEGIN_SRC emacs-lisp
   (require 'treemacs)
   (require 'treemacs-projectile)
   (require 'treemacs-evil)
   (treemacs) ;; Open on start

   (require 'ranger)
   (ranger-override-dired-mode t)
   #+END_SRC


** Improve visuals
   #+BEGIN_SRC emacs-lisp
   (require 'highlight-parentheses)
   (highlight-parentheses-mode t)
   #+END_SRC

   It mackes cursor blinks on buffer scroll
   #+BEGIN_SRC emacs-lisp
   (require 'beacon)
   (beacon-mode t)
   #+END_SRC

*** Powerline
    #+BEGIN_SRC emacs-lisp
    (require 'telephone-line)
    (telephone-line-mode 1)
    #+END_SRC


*** Tabs
    #+BEGIN_SRC emacs-lisp
    (require 'all-the-icons)
    (require 'centaur-tabs)
    (setq centaur-tabs-style "wave")
    (centaur-tabs-headline-match)
    (setq centaur-tabs-set-icons t)
    (setq centaur-tabs-set-modified-marker t)
    (setq centaur-tabs-height 32)
    (centaur-tabs-mode t)

    (centaur-tabs-group-by-projectile-project)
    #+END_SRC

    I like to switch between only visible tabs, in other cases it is handful to use ivy
    #+BEGIN_SRC emacs-lisp
    (setq centaur-tabs-cycle-scope 'tabs)
    #+END_SRC


** Programming languages intergation
   #+BEGIN_SRC emacs-lisp
   (require 'nix-mode)
   (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))

   (require 'yaml-mode)
   (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
   (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))

   (require 'typescript-mode)
   (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode))
   (setq typescript-indent-level 2)

   (require 'vue-mode)
   (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
   #+END_SRC


** LSP
   #+BEGIN_SRC emacs-lisp
   (require 'flycheck)
   (require 'lsp-ui)
   (require 'lsp-treemacs)
   (require 'company-lsp)
   (require 'lsp-mode)
   (add-hook 'prog-mode-hook #'lsp)

   (mapc 'lsp-ui-flycheck-add-mode '(typescript-mode js-mode css-mode vue-html-mode vue-mode))
   #+END_SRC


** Keys
   #+BEGIN_SRC emacs-lisp
   (evil-leader/set-leader "SPC")
   (evil-leader/set-key
    "g" 'centaur-tabs-counsel-switch-group

    "x" 'kill-this-buffer
    "n" 'centaur-tabs-forward
    "p" 'centaur-tabs-backward

    "." 'find-file
    "j" 'counsel-projectile
    "J" 'counsel-projectile-switch-project

    "b" 'ivy-switch-buffer
    "r" 'counsel-M-x
    "e" 'eval-expression
    "t" 'org-time-stamp
    "c" 'insert-char)

   (global-set-key [f10] 'treemacs)
   #+END_SRC


** Defenition of base16 nix-generated theme
   #+BEGIN_SRC emacs-lisp
   (require 'base16-theme)

   (defvar base16-nix-colors
     '(:base00 "${color.base0}"
       :base01 "${color.base1}"
       :base02 "${color.base2}"
       :base03 "${color.base3}"
       :base04 "${color.base4}"
       :base05 "${color.base5}"
       :base06 "${color.base6}"
       :base07 "${color.base7}"
       :base08 "${color.base8}"
       :base09 "${color.base9}"
       :base0A "${color.base10}"
       :base0B "${color.base11}"
       :base0C "${color.base12}"
       :base0D "${color.base13}"
       :base0E "${color.base14}"
       :base0F "${color.base15}")
     "All colors for Base16 nix are defined here.")

   ;; Define the theme
   (deftheme base16-nix)
   (base16-theme-define 'base16-nix base16-nix-colors)
   (provide-theme 'base16-nix)
   (provide 'base16-nix-theme)

   ;; Set the cursor color based on the evil state
   (defvar my/base16-colors base16-nix-colors)
   (setq evil-emacs-state-cursor   `(,(plist-get my/base16-colors :base0D) box)
	 evil-insert-state-cursor  `(,(plist-get my/base16-colors :base0D) bar)
	 evil-motion-state-cursor  `(,(plist-get my/base16-colors :base0E) box)
	 evil-normal-state-cursor  `(,(plist-get my/base16-colors :base0B) box)
	 evil-replace-state-cursor `(,(plist-get my/base16-colors :base08) bar)
	 evil-visual-state-cursor  `(,(plist-get my/base16-colors :base09) box))
   #+END_SRC

''
